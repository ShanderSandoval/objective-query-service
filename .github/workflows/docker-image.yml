name: Deploy Docker to EC2 (Windows)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Docker App on EC2 (Windows)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH key and known hosts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "$env:USERPROFILE\.ssh"
          Set-Content -Path "$env:USERPROFILE\.ssh\id_rsa" -Value "${{ secrets.EC2_SSH_KEY }}"
          icacls "$env:USERPROFILE\.ssh\id_rsa" /inheritance:r /grant:r "${env:USERNAME}:F"
          ssh-keyscan -H ${{ secrets.HOST_DNS }} | Out-File -Append -Encoding ASCII "$env:USERPROFILE\.ssh\known_hosts"

      - name: Install Docker on Windows
        shell: pwsh
        run: |
          choco install docker-cli -y
          Start-Service docker

      - name: Build Docker image
        shell: pwsh
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:latest .
          docker save -o app.tar ${{ secrets.DOCKER_IMAGE_NAME }}:latest

      - name: Check if app.tar exists
        shell: pwsh
        run: |
          if (!(Test-Path "app.tar")) {
            Write-Host "❌ ERROR: El archivo app.tar no existe."
            exit 1
          } else {
            Write-Host "✅ Archivo app.tar encontrado."
          }

      - name: Transfer Docker image to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "app.tar"
          target: "${{ secrets.TARGET_DIR }}"
          rm: true  # Elimina archivos previos antes de copiar

      - name: Run Docker container on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "📌 Verificando e instalando Docker en EC2..."
            sudo apt-get remove -y containerd || true
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates curl gnupg lsb-release
            sudo mkdir -m 0755 -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update -y
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            echo "📌 Otorgando permisos al directorio destino..."
            sudo chmod -R 777 ${{ secrets.TARGET_DIR }}
            echo "📌 Cargando la imagen Docker..."
            sudo docker load -i ${{ secrets.TARGET_DIR }}/app.tar
            echo "📌 Verificando si el contenedor ya existe..."
            if sudo docker ps -a --format '{{.Names}}' | grep -q "^${{ secrets.DOCKER_IMAGE_NAME }}$"; then
              echo "📌 Deteniendo y eliminando el contenedor existente..."
              sudo docker stop ${{ secrets.DOCKER_IMAGE_NAME }} || true
              sudo docker rm ${{ secrets.DOCKER_IMAGE_NAME }} || true
            else
              echo "📌 No hay contenedor antiguo. Continuando con el despliegue..."
            fi
            echo "📌 Iniciando el nuevo contenedor con variables de entorno..."
            sudo docker run -d \
              --name ${{ secrets.DOCKER_IMAGE_NAME }} \
              -p 80:10072 \
              -e SPRING_DATA_MONGODB_DATABASE=${{ secrets.SPRING_DATA_MONGODB_DATABASE }} \
              -e SPRING_DATA_MONGODB_URI=${{ secrets.SPRING_DATA_MONGODB_URI }} \
              -e SPRING_DATA_MONGODB_AUTHENTICATION-DATABASE=${{ secrets.SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE }} \
              -e SPRING_KAFKA_BOOTSTRAP-SERVERS=${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }} \
              ${{ secrets.DOCKER_IMAGE_NAME }}:latest
            echo "✅ Despliegue completado con Docker 🚀"
